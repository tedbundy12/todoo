document.addEventListener("DOMContentLoaded", () => {
  const search = document.querySelector(".search");
  const noTasks = document.querySelector(".noTasks");
  const addTaskButton = document.querySelector(".addTask");
  const tasksContainer = document.querySelector(".tasksContainer");
  const tasksFunctionalContainer = document.querySelector(".tasksFunctional");
  const deleteAllButton = document.querySelector(".deleteTask");
  const buttonsContainer = document.querySelector(".buttonsContainer");

  let isMessageDisplayed = false;

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ –∑–∞–¥–∞—á
  const updateNoTasksMessage = () => {
    const tasks = tasksContainer.querySelectorAll("li");
    noTasks.style.display = tasks.length === 0 ? "block" : "none";
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á –≤ localStorage
  const saveTasksToLocal = () => {
    const tasks = [];
    tasksContainer.querySelectorAll("li").forEach((task) => {
      const taskSpan = task.querySelector("span");
      const isCompleted = task.classList.contains("completed");
      const isSkipped = task.classList.contains("skipped");
      tasks.push({
        text: taskSpan.textContent,
        completed: isCompleted,
        skipped: isSkipped,
      });
    });
    localStorage.setItem("tasks", JSON.stringify(tasks));
  };

  // search.setAttribute('maxlength', '40')
  const checkScreenSize = () => {
    if (window.innerWidth < 800) {
      search.setAttribute("maxlength", "25");
    } else {
      search.setAttribute("maxlength", '50');
    }
  };

  // Initial check when the page loads
  checkScreenSize();

  // Check on window resize
  window.addEventListener("resize", checkScreenSize);

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∏
  const addTasks = () => {
    const taskText = search.value.trim();
    if (taskText) {
      addTaskElement(taskText);
      saveTasksToLocal();
      updateNoTasksMessage();
      search.value = ""; // –û—á–∏—Å—Ç–∫–∞ –ø–æ–ª—è –ø–æ–∏—Å–∫–∞
    } else {
      alert("Write Something!");
    }
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –≤—Å–µ—Ö –∑–∞–¥–∞—á
  const deleteAllTasks = (message, duration) => {
    const tasks = tasksContainer.querySelectorAll("li");
    if (tasks.length === 0) {
      // –ï—Å–ª–∏ –∑–∞–¥–∞—á –Ω–µ—Ç, –Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ, –µ—Å–ª–∏ –æ–Ω–æ —É–∂–µ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è
      if (!isMessageDisplayed) {
        isMessageDisplayed = true;
        const falseMessageElm = document.createElement("span");
        falseMessageElm.textContent = "There are no tasks to delete";
        buttonsContainer.appendChild(falseMessageElm);

        setTimeout(() => {
          buttonsContainer.removeChild(falseMessageElm);
          isMessageDisplayed = false;
        }, 1000);
      }
      return;
    }

    tasks.forEach((task) => task.remove());
    localStorage.removeItem("tasks");
    updateNoTasksMessage();

    if (!isMessageDisplayed) {
      isMessageDisplayed = true;
      const messageElm = document.createElement("span");
      messageElm.textContent = message;
      buttonsContainer.appendChild(messageElm);

      setTimeout(() => {
        buttonsContainer.removeChild(messageElm);
        isMessageDisplayed = false;
      }, duration);
    }
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —ç–ª–µ–º–µ–Ω—Ç–∞ –∑–∞–¥–∞—á–∏ –≤ —Å–ø–∏—Å–æ–∫
  const addTaskElement = (text, completed = false, skipped = false) => {
    const li = document.createElement("li");
    li.style.display = "flex";
    li.style.alignItems = "center";

    const taskSpan = document.createElement("span");
    taskSpan.textContent = text;
    taskSpan.style.flex = "1";

    const actionsDiv = document.createElement("div");
    actionsDiv.classList.add("task-actions");
    actionsDiv.style.display = "flex";
    actionsDiv.style.gap = "5px";

    const deleteIcon = document.createElement("span");
    deleteIcon.textContent = "‚ùå";
    deleteIcon.style.cursor = "pointer";
    deleteIcon.classList.add("icon", "delete-icon");
    deleteIcon.addEventListener("click", () => {
      li.remove();
      updateNoTasksMessage(); // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ –∑–∞–¥–∞—á –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è
      saveTasksToLocal();
    });

    const editIcon = document.createElement("span");
    editIcon.textContent = "‚úèÔ∏è";
    editIcon.style.cursor = "pointer";
    editIcon.classList.add("icon", "edit-icon");
    editIcon.addEventListener("click", () => {
      const input = document.createElement("input");
      input.type = "text";
      input.value = taskSpan.textContent;
      input.addEventListener("keydown", (e) => {
        if (e.key === "Enter") {
          taskSpan.textContent = input.value;
          li.replaceChild(taskSpan, input);
          saveTasksToLocal();
        }
      });
      input.addEventListener("blur", () => {
        taskSpan.textContent = input.value;
        li.replaceChild(taskSpan, input);
        saveTasksToLocal();
      });
      li.replaceChild(input, taskSpan);
      input.focus();
    });

    const completeIcon = document.createElement("span");
    completeIcon.textContent = completed ? "üîÑ" : "‚úîÔ∏è";
    completeIcon.style.cursor = "pointer";
    completeIcon.classList.add("icon", "complete-icon");
    completeIcon.addEventListener("click", () => {
      toggleCompleted(li);
    });

    const skipIcon = document.createElement("span");
    skipIcon.textContent = skipped ? "‚ûï" : "‚ûñ";
    skipIcon.style.cursor = "pointer";
    skipIcon.classList.add("icon", "skip-icon");
    skipIcon.addEventListener("click", () => {
      toggleSkipped(li);
    });

    actionsDiv.appendChild(completeIcon);
    actionsDiv.appendChild(skipIcon);
    actionsDiv.appendChild(editIcon);
    actionsDiv.appendChild(deleteIcon);

    li.appendChild(taskSpan);
    li.appendChild(actionsDiv);

    if (completed) {
      li.classList.add("completed");
      updateTaskAppearance(li); // –û–±–Ω–æ–≤–ª—è–µ–º –≤–Ω–µ—à–Ω–∏–π –≤–∏–¥ –∑–∞–¥–∞—á–∏
    } else if (skipped) {
      li.classList.add("skipped");
      updateTaskAppearance(li); // –û–±–Ω–æ–≤–ª—è–µ–º –≤–Ω–µ—à–Ω–∏–π –≤–∏–¥ –∑–∞–¥–∞—á–∏
    }

    tasksContainer.appendChild(li);
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á–∏
  const toggleCompleted = (taskItem) => {
    taskItem.classList.toggle("completed");
    taskItem.classList.remove("skipped"); // –£–±–∏—Ä–∞–µ–º —Å—Ç–∞—Ç—É—Å skipped –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ completed
    updateTaskAppearance(taskItem); // –û–±–Ω–æ–≤–ª—è–µ–º –≤–Ω–µ—à–Ω–∏–π –≤–∏–¥ –∑–∞–¥–∞—á–∏
    saveTasksToLocal();
    updateNoTasksMessage(); // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ –∑–∞–¥–∞—á –ø–æ—Å–ª–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø—Ä–æ–ø—É—Å–∫–∞ –∑–∞–¥–∞—á–∏
  const toggleSkipped = (taskItem) => {
    taskItem.classList.toggle("skipped");
    taskItem.classList.remove("completed"); // –£–±–∏—Ä–∞–µ–º —Å—Ç–∞—Ç—É—Å completed –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ skipped
    updateTaskAppearance(taskItem); // –û–±–Ω–æ–≤–ª—è–µ–º –≤–Ω–µ—à–Ω–∏–π –≤–∏–¥ –∑–∞–¥–∞—á–∏
    saveTasksToLocal();
    updateNoTasksMessage(); // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ –∑–∞–¥–∞—á –ø–æ—Å–ª–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤–Ω–µ—à–Ω–µ–≥–æ –≤–∏–¥–∞ –∑–∞–¥–∞—á–∏
  const updateTaskAppearance = (taskElement) => {
    const completeIcon = taskElement.querySelector(".complete-icon");
    const skipIcon = taskElement.querySelector(".skip-icon");
    if (taskElement.classList.contains("completed")) {
      completeIcon.textContent = "üîÑ";
      taskElement.style.background = "rgba(32, 199, 80, 0.833)";
      taskElement.style.color = "white";
      skipIcon.textContent = "‚ûñ";
    } else if (taskElement.classList.contains("skipped")) {
      skipIcon.textContent = "‚ûï";
      taskElement.style.background = "rgba(199, 199, 32, 0.833)";
      taskElement.style.color = "white";
      completeIcon.textContent = "‚úîÔ∏è";
    } else {
      completeIcon.textContent = "‚úîÔ∏è";
      skipIcon.textContent = "‚ûñ";
      taskElement.style.background = "initial";
      taskElement.style.color = "initial";
    }
  };

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
  const loadTasksFromLocal = () => {
    const tasks = JSON.parse(localStorage.getItem("tasks")) || [];
    tasks.forEach((task) => {
      addTaskElement(task.text, task.completed, task.skipped);
    });
    updateNoTasksMessage();
    tasksContainer.querySelectorAll("li").forEach((task) => {
      updateTaskAppearance(task); // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∏–ª–∏ –¥–ª—è –≤—Å–µ—Ö –∑–∞–¥–∞—á
    });
  };

  // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–∞—á—É –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ Enter
  search.addEventListener("keydown", (e) => {
    if (e.key === "Enter") addTasks();
  });

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∏
  addTaskButton.addEventListener("click", addTasks);

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ —É–¥–∞–ª–µ–Ω–∏—è –≤—Å–µ—Ö –∑–∞–¥–∞—á
  deleteAllButton.addEventListener("click", () => {
    deleteAllTasks("All tasks have been deleted", 1000);
  });

  // –ó–∞–≥—Ä—É–∂–∞–µ–º –∑–∞–¥–∞—á–∏ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
  loadTasksFromLocal();
});
